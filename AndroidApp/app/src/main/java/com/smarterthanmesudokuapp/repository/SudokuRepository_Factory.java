// Generated by Dagger (https://dagger.dev).
package com.smarterthanmesudokuapp.repository;

import com.smarterthanmesudokuapp.data.local.SudokuLocalDataSource;
import com.smarterthanmesudokuapp.data.remote.SudokuRemoteDataSource;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SudokuRepository_Factory implements Factory<SudokuRepository> {
  private final Provider<SudokuLocalDataSource> localDataSourceProvider;

  private final Provider<SudokuRemoteDataSource> sudokuRemoteDataSourceProvider;

  public SudokuRepository_Factory(Provider<SudokuLocalDataSource> localDataSourceProvider,
      Provider<SudokuRemoteDataSource> sudokuRemoteDataSourceProvider) {
    this.localDataSourceProvider = localDataSourceProvider;
    this.sudokuRemoteDataSourceProvider = sudokuRemoteDataSourceProvider;
  }

  @Override
  public SudokuRepository get() {
    return newInstance(localDataSourceProvider.get(), sudokuRemoteDataSourceProvider.get());
  }

  public static SudokuRepository_Factory create(
      Provider<SudokuLocalDataSource> localDataSourceProvider,
      Provider<SudokuRemoteDataSource> sudokuRemoteDataSourceProvider) {
    return new SudokuRepository_Factory(localDataSourceProvider, sudokuRemoteDataSourceProvider);
  }

  public static SudokuRepository newInstance(SudokuLocalDataSource localDataSource,
      SudokuRemoteDataSource sudokuRemoteDataSource) {
    return new SudokuRepository(localDataSource, sudokuRemoteDataSource);
  }
}
